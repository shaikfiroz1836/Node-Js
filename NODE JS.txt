                                                                          NODE JS


1)To work on both Frontend and Backend in JavaScript they introduced Node js(Backend Applications).
2)Node js is used to build Backend Applications.
3)Express is a node js Framework.
4)If we install node js we get two node and npm(node package manager).
5)To use node js we need to know javascript ES6 features like CALLBACK and ()=>{}.

ASYNCHRONOS & NON-BLOCKING:
1)Multiple request at a time.
  a)CALLBACK
  b)PROMISE
  c)ASYNC&AWAIT

example: 
        setInterval(()=>{console.log("Every 2 sec")},2000)

SYNCHRONOUS:
1)one request at a time.
2)Blocks others request.

NODE JS
1)node - JavaScript runtime environment.
2)npm - Utility command.

INBUILT MODULES:
1)OS
2)JS
3)PATH
4)HTTP
5)URL

1)3rd pary modules available in npmjs.com - js dependency
2)npm install MySQL
3)npm install nodemon.

MODULE:
A group of files is called MOdule.

FS:
1)used to run files like .txt or .pdf files.

Read File:
1)readFile
2)readFileSync.
                ex-Es6:
                    read.js:
                        const fs = require('fs')
                        let data = (fs.readFileSync('data.txt','utf-8'))
                        console.log(data)
           
                   data.txt:
                        Hello Mowa Kalki 2898 Ad movie chusava?
PATH Module:
1)Construct the file path.

      PathEx:
            const path = require('path')
            const fs = require('fs')
            let data = fs.readFileSync(path.join(__dirname,"Emp","data.txt"),'utf-8')
            console.log(data)
      data.txt:
            you will not find anything because i have taken the data.txt from FsEs2 file.

Read&Write:
          readwritesync.js:
                        const fs = require('fs')
                        let data = fs.readFileSync('emp.txt','utf-8') - Encoding Format
                        fs.writeFileSync('data.txt',data,'utf-8') - if file is not there it is going to create a new file.
                        console.log(data)

Read&Write - Path:
          readwritesync2.js:
                         const fs = require('fs');
                         const path = require('path');
                         let data = fs.readFileSync(path.join('C:/Users/DELL/Desktop/Programming/Node js/Read&Write', 'data.txt'), 'utf-8');
                         fs.writeFileSync(path.join(__dirname, 'Hyd.txt'), data, 'utf-8');
                         console.log(data);
                   Hyd.txt:
                         The four pillars around Charminar represent the four caliphs. These pillars or minars are 48.7 meters high. These are four stories,                       with each floor divided by intricately carved rings that surround it. On the top floor of Chaminar there is a mosque which is believed to be the oldest mosque of Hyderabad city.


Read JSON data:
             const fs=require('fs')
             const { json } = require('stream/consumers')
             fs.readFile('users.json','utf-8',(err,data)=>{
              if(err) throw err 
              console.log(typeof data)
              let users = JSON.parse(data)
              console.log(typeof users)

              for( user of users){
              console.log(user)
              }
            })


Filter Json Data:

const fs=require('fs')
fs.readFile('users.json','utf-8',(err,data)=>{
    if(err) throw err 
    console.log(typeof data)
    let users=JSON.parse(data)
    console.log(typeof users)
    let male_Users=[]
    let female_Users=[]
    for(user of users){
        if(user.gender==="Male"){
            male_Users.push(user)
        }
        else{
            female_Users.push(user)
        }
    }
    fs.writeFile('male.json',JSON.stringify(male_Users),(err)=>{
        if(err) throw err 
        console.log("Male Users written successfully")
    })
    fs.writeFile('female.json',JSON.stringify(female_Users),(err)=>{
        if(err) throw err 
        console.log("Female Users - Written successfully!") 
    })
})



HTTP MODULE:
1)To make server side modules we need http module.


EX1:
server.js:

const http = require('http')
let server = http.createServer((req,res)=>{
    res.end("<H1>Virat Kohli</H1>")
})

server.listen(3000,"127.0.0.1",(err)=>{
    if(err) throw err
    console.log("Server is running on port 3000")
})


EX2:(Nodemon):
const http = require('http')
let server = http.createServer((req,res)=>{
    res.end("<H1>Virat Kohli</H1>")
})

server.listen(5000,"127.0.0.1",(err)=>{
    if(err) throw err
    console.log("Server is running on port 5000")
})
